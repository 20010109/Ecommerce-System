scalar Time

type Payment {
    id: ID!
    orderId: Int!
    userId: Int!
    amount: Float!
    currency: String!
    paymentMethod: String!
    paymentStatus: String!
    transactionReference: String
    paymentProvider: String
    paidAt: Time
    createdAt: Time
    updatedAt: Time
}

input NewPayment {
    orderId: Int!
    userId: Int!
    amount: Float!
    currency: String!
    paymentMethod: String!
    paymentProvider: String
}

type Query {
    payments: [Payment!]!
}

type Mutation {
    createPayment(input: NewPayment!): Payment!
    verifyPayment(paymentId: ID!): Payment
    refundPayment(paymentId: ID!): Payment  
}
